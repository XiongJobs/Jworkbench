<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
           
	<!-- 引入外部属性（jdbc） -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置c3p0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 配置业务层类 -->
	<bean id="accountService" class="spring.demo.service.AccountServiceImple1">
		<property name="accountDao" ref="accountDao"></property>
		<!-- 注入事务管理模板 -->
		<!-- <property name="transactionTemplate" ref="transactionTemplate"></property> -->
	</bean>
	
	<!-- 配置DAO类 -->
	<bean id="accountDao" class="spring.demo.dao.AccountDaoImple1">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置编程式事务管理模板（Spring简化事务管理代码提供的类）用于编码式事务管理 -->
<!-- 	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"></property>
	</bean> -->
	
	<!-- 配置业务层的代理 (基于声明基本用法)-->
<!-- 	<bean id="accountServiceProxy" 
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		配置代理目标对象
		<property name="target" ref="accountService"></property>
		注入事务管理器
		<property name="transactionManager" ref="transactionManager"></property>
		注入事务属性
		<property name="transactionAttributes">
			<props>
			prop格式：
				*PROPAGATION :事务的传播行为。
				*ISOLATION   :事务的隔离级别
				*readOnly    :只读
				*-Exception  :发生哪些异常回滚事务
				*+Exception  :发生哪些异常不回滚事务
				<prop key="transfer">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- 基于aspectj的事务管理	 -->
	
	<!-- 配置事务的通知:(事务管理) -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		propagation:事务传播行为
			isolation  :事务隔离级别
			read-only  :是否只读
			rollback-for:发生哪些异常回滚
			no_rollback_for:发生哪些异常不回滚 
			timeout    :过期信息    
			<tx:method name="transfer" propagation="REQUIRED" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	
	配置切面
	<aop:config>
		配置切入点
		<aop:pointcut expression="execution(* spring.demo.service.AccountService+.*(..))" id="pointcut1"/>
		配置切面 通知
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
	</aop:config> -->
	
	
	<!-- 基于注解的事务管理 -->
	
	<!-- 开启注解 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>